{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6839de39",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from timeit import default_timer as timer\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "41c85867",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ecc_sequential_CPP\n",
    "import ecc_utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2321c646",
   "metadata": {},
   "outputs": [],
   "source": [
    "point_cloud = pd.read_csv('sphere4_50000.csv', header=None).values\n",
    "\n",
    "EPSILON = 0.20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b22ee8f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50000, 5)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "point_cloud.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8200c9fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "point_cloud = []\n",
    "\n",
    "NUMBER_OF_POINTS = 100\n",
    "EPSILON = 1\n",
    "\n",
    "random.seed(42)\n",
    "for i in range(NUMBER_OF_POINTS):\n",
    "    angle = random.uniform(0,2*np.pi)\n",
    "    point_cloud.append([np.cos(angle), np.sin(angle)])\n",
    "    \n",
    "point_cloud = np.array(point_cloud)\n",
    "\n",
    "#np.savetxt('circle.csv', point_cloud, fmt='%f', delimiter=',')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08e73380",
   "metadata": {},
   "source": [
    "### multiprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3d36a46b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 80.44594018900001\n"
     ]
    }
   ],
   "source": [
    "workers = [1,2,4,8,12,16,24]\n",
    "workers = [2]\n",
    "\n",
    "for num in workers:\n",
    "    start = timer()\n",
    "    proc_ECC, num_simp = ecc_sequential_CPP.compute_local_contributions_MULTIPROCESS(point_cloud, EPSILON, num)\n",
    "    end = timer()\n",
    "    #print(num, num_simp,  end - start )\n",
    "    print(num, end - start )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9c247e38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3526438790826699"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_simp = list(num_simp)\n",
    "num_simp.sort(reverse=True)\n",
    "num_simp[0] / sum(num_simp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "970c60da",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2112749b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "277d5ab2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4830f255",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ead5c9b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('results/100-1.csv', sep = ' ', header = None, names = ['cores', 'time'])\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(data.cores, data.time, 'o-')\n",
    "plt.title('100 points in the circle \\n epsilon=1')\n",
    "plt.xlabel('Cores')\n",
    "plt.ylabel('Time [s]')\n",
    "plt.xticks([1,2,4,8,12,16,24], [1,2,4,8,12,16,24])\n",
    "plt.savefig('results/circle-100-1.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab6a5ae7",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('results/sphere-10000-01.csv', sep = ' ', header = None, names = ['cores', 'time'])\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(data.cores, data.time, 'o-')\n",
    "plt.title('10k points in the 4-sphere \\n epsilon=0.1')\n",
    "plt.xlabel('Cores')\n",
    "plt.ylabel('Time [s]')\n",
    "plt.xticks([1,2,4,8,12,16,24], [1,2,4,8,12,16,24])\n",
    "plt.savefig('results/sphere-10000-01.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ae61680",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3bc2591d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6aded151",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b24972b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def stupid(i):\n",
    "    return 42, i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7010887f",
   "metadata": {},
   "outputs": [],
   "source": [
    "cacca, buona = zip(*map(stupid, [1,2,3,4]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "957443cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "cacca"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7fa78dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "buona"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e15ddea",
   "metadata": {},
   "outputs": [],
   "source": [
    "(*map(stupid, [1,2,3,4]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c3bf692",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
